package com.firebaselibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.firebaselibrary.bean.LocationBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LOCATION_BEAN".
*/
public class LocationBeanDao extends AbstractDao<LocationBean, Long> {

    public static final String TABLENAME = "LOCATION_BEAN";

    /**
     * Properties of entity LocationBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Lat = new Property(1, double.class, "lat", false, "LAT");
        public final static Property Lng = new Property(2, double.class, "lng", false, "LNG");
        public final static Property Timestamp = new Property(3, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property Speed = new Property(4, double.class, "speed", false, "SPEED");
        public final static Property Udid = new Property(5, String.class, "udid", false, "UDID");
    }


    public LocationBeanDao(DaoConfig config) {
        super(config);
    }
    
    public LocationBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LOCATION_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"LAT\" REAL NOT NULL ," + // 1: lat
                "\"LNG\" REAL NOT NULL ," + // 2: lng
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 3: timestamp
                "\"SPEED\" REAL NOT NULL ," + // 4: speed
                "\"UDID\" TEXT);"); // 5: udid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LOCATION_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LocationBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindLong(4, entity.getTimestamp());
        stmt.bindDouble(5, entity.getSpeed());
 
        String udid = entity.getUdid();
        if (udid != null) {
            stmt.bindString(6, udid);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LocationBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindDouble(2, entity.getLat());
        stmt.bindDouble(3, entity.getLng());
        stmt.bindLong(4, entity.getTimestamp());
        stmt.bindDouble(5, entity.getSpeed());
 
        String udid = entity.getUdid();
        if (udid != null) {
            stmt.bindString(6, udid);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public LocationBean readEntity(Cursor cursor, int offset) {
        LocationBean entity = new LocationBean( //
            cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // lat
            cursor.getDouble(offset + 2), // lng
            cursor.getLong(offset + 3), // timestamp
            cursor.getDouble(offset + 4), // speed
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // udid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LocationBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setLat(cursor.getDouble(offset + 1));
        entity.setLng(cursor.getDouble(offset + 2));
        entity.setTimestamp(cursor.getLong(offset + 3));
        entity.setSpeed(cursor.getDouble(offset + 4));
        entity.setUdid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LocationBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LocationBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(LocationBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
