package com.firebaselibrary.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.firebaselibrary.bean.NavigationAddressBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "NAVIGATION_ADDRESS_BEAN".
*/
public class NavigationAddressBeanDao extends AbstractDao<NavigationAddressBean, Long> {

    public static final String TABLENAME = "NAVIGATION_ADDRESS_BEAN";

    /**
     * Properties of entity NavigationAddressBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property X = new Property(1, double.class, "x", false, "X");
        public final static Property Y = new Property(2, double.class, "y", false, "Y");
        public final static Property Address = new Property(3, String.class, "address", false, "ADDRESS");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property Histroyid = new Property(5, long.class, "histroyid", false, "HISTROYID");
    }


    public NavigationAddressBeanDao(DaoConfig config) {
        super(config);
    }
    
    public NavigationAddressBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"NAVIGATION_ADDRESS_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"X\" REAL NOT NULL ," + // 1: x
                "\"Y\" REAL NOT NULL ," + // 2: y
                "\"ADDRESS\" TEXT," + // 3: address
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"HISTROYID\" INTEGER NOT NULL );"); // 5: histroyid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"NAVIGATION_ADDRESS_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, NavigationAddressBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getX());
        stmt.bindDouble(3, entity.getY());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getHistroyid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, NavigationAddressBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindDouble(2, entity.getX());
        stmt.bindDouble(3, entity.getY());
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(4, address);
        }
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getHistroyid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public NavigationAddressBean readEntity(Cursor cursor, int offset) {
        NavigationAddressBean entity = new NavigationAddressBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getDouble(offset + 1), // x
            cursor.getDouble(offset + 2), // y
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // address
            cursor.getInt(offset + 4), // type
            cursor.getLong(offset + 5) // histroyid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, NavigationAddressBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setX(cursor.getDouble(offset + 1));
        entity.setY(cursor.getDouble(offset + 2));
        entity.setAddress(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setHistroyid(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(NavigationAddressBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(NavigationAddressBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(NavigationAddressBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
